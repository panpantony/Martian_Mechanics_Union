Lagrange Point's Position (e1):
clc;
clear;
% Clear value table and commands before every run.

% Constants:
g=6.674*10^-11; %Gravity Constant
%Mars
t_mars = 5.9356*10^7; % Period of Mars
m_sun = 1.9891*10^30; % Mass of the Sun
m_mars = 6.4171*10^23; % Mass of Mars
r_mars = 2.2739*10^11; % Distance from the Sun to Mars

e1 = lg(g,t_mars,r_mars,m_sun,m_mars); % Call Lagrange Point Function (1)
e1 = e1(1,1); % Manually eliminate imaginary values (use for loop if necessary)
disp(['e1 is: ', num2str(e1)]); % Convert number to string with num2str

Hohmann Transfer:
% Constants
r_earth  = 1.496 * 10^11; % Distance from the Sun to Earth in meter
r_mars = 2.28 * 10^11; % Distance from the Sun to Mars in meter
mu_sun = 132712440018 * (1000^3); % 
mu_mars = (6.674*10^-11) * (6.4191*10^23); % 
theta = 1.85; 


Vdep = ve(mu_sun,r_earth,r_mars) - vc(mu_sun,r_earth);
Var = vc(mu_sun,r_mars) - ve(mu_sun,r_mars,r_earth);
time_travel = ttf(mu_sun,r_earth,r_mars);

disp(['V departure: ' ,num2str(Vdep)]);
disp(['V arrival: ' ,num2str(Var)]);
disp(['Time: : ',num2str(time_travel) '. Time in days: ',num2str(time_travel/86400)]);


T = 7*60*60; % Period of the satellite orbit (seconds)
a = ((T*(sqrt(mu_mars)))/(2*pi))^(2/3); % Semi-major axis
e = (2*mu_mars)/(a*(Var^2))-1; % Eccentricity
r_p = a.*(1-e); % The distance of the major focus to the periasis
r_p2 = ((2*mu_mars)*(1-e))/((Var^2)*(1+e));
r_a = (2*mu_mars)/(Var^2); % Distance from farther focus to periapsis
r_min = sort((2*r_p)/(1-e)); % Capture orbit distance
v_i = sqrt(((2*mu_mars)/r_p) - (mu_mars/a)); % 
v_s = 2*sind((1.85/2))*abs(v_i);

disp(['Arrival Velocity: ', num2str(Var)]);
disp(['Semi-major Axis: ',num2str(a)]);
disp(['Eccentricity: ', num2str(e)]);
disp(['Capture orbit distance: ', num2str(r_min)]);
disp(num2str(r_p));
disp(num2str(r_a));
disp(num2str(v_i));
disp(num2str(v_s));


TCM (The conic helix movement)
syms t
% Ratio between distance from Mars to Mars' L1/(Earth to Earth's L1)
distance_ratio = 919000/1500000;
% Ratio * days needed to go from Earth to Earth's L1 converted to seconds
sec_to_marsL1 = distance_ratio * 30 * 24 * 60 * 60; % = 18.38 days converted to seconds

% 1. Period: 2pi/(second needed to complete 1 revolution)
beta = (2*pi)/sec_to_marsL1;
% 2. Cal. constant for x function radius of halo orbit/ time travel in x direction
x_const = 300000/sec_to_marsL1;
% 3. Derive distant travelled in Y direction by using velosity of mars * time in hours we need to get to mars + radius of halo orbit (300000km
% assumption)
y_distance = (86871 * (18.38 * 24)) + 300000;
% 4. Repeat step 2 but for Y direction
y_const = y_distance/sec_to_marsL1;
% 5. finding constant for the Z function distance / square root oftime travelled in Z
% direction (because it's a dampering function)
z_distance = 919000; % from the Lagrange Point Calculation
z_const = z_distance/sqrt(sec_to_marsL1);
% 6. plug everything to conic helix function
x = x_const*t*cos(beta*t);
y = y_const*t*sin(beta*t);
z = z_const*sqrt(t);
dx = diff(x,t);
dy = diff(y,t);
dz = diff(z,t);
% 7. derivative of the function and plugged to arclength function for total
MagF = sqrt(((dx)^2)+(dy)^2+(dz)^2); 
arcl = vpaintegral(MagF,t,[0 sec_to_marsL1]);
disp(arcl);
% Arclength is the displacement




Function Definition
Lagrange Point:
function lagpt = lg(g,t,r,bmass,smass)
    syms e;
    ff = -(g*bmass)+( (g*smass*(r-e).^2*t.^2) + (4*pi.^2*(r-e).^3*e.^2) )/(t.^2*e.^2);
    e = double(solve(ff,e));
    lagpt = e;
end
        2. Circular Velocity 
function vcir = vc(mu,r)
    %mu = (6.674*10^-11) * (1.9891*10^30);
    vcir = sqrt(mu/r);
end
        3. Elliptical Velocity
function vellip = ve(mu,r1,r2)
    %mu = (6.674*10^-11) * (1.9891*10^30);
    a = (r1+r2)/2;
    vellip = sqrt(mu*((2/r1)-(1/a)));
end
        4. Time transfer
function t = ttf(mu,r1,r2)
    %mu = (6.674*10^-11) * (1.9891*10^300);
    a = (r1+r2)/2;
    t = pi.*sqrt(a^3/mu);
end

